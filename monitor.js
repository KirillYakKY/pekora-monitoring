const https = require('https');

const DISCORD_WEBHOOK = process.env.DISCORD_WEBHOOK;
const LAST_ITEM_ID = process.env.LAST_ITEM_ID;
let currentLastId = LAST_ITEM_ID;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, postData = null) {
    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    resolve(JSON.parse(data));
                } catch (e) {
                    resolve(data);
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        if (postData) {
            req.write(postData);
        }
        
        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord
async function sendDiscordNotification(item) {
    const itemUrl = `https://www.pekora.zip/catalog/${item.id}/www`;
    const itemImageUrl = `https://www.pekora.zip/Thumbs/Asset.ashx?width=110&height=110&assetId=${item.id}`;

    const priceText = item.price && item.price > 0 ? `${item.price} R$` : "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ";

    const embed = {
        title: "üéØ –ù–û–í–´–ô –¢–û–í–ê–† –í –ö–ê–¢–ê–õ–û–ì–ï!",
        description: `**${item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}**`,
        color: 0x00FF00,
        fields: [
            {
                name: "üí∞ –¶–µ–Ω–∞",
                value: priceText,
                inline: true
            },
            {
                name: "üÜî ID —Ç–æ–≤–∞—Ä–∞",
                value: `\`${item.id}\``,
                inline: true
            },
            {
                name: "üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å",
                value: item.creatorName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                inline: true
            },
            {
                name: "üì¶ –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞",
                value: item.itemType || "Asset",
                inline: true
            },
            {
                name: "üìä –ü—Ä–æ–¥–∞–Ω–æ –∫–æ–ø–∏–π",
                value: item.saleCount ? item.saleCount.toLocaleString() : "0",
                inline: true
            },
            {
                name: "üîÑ –í –ø—Ä–æ–¥–∞–∂–µ",
                value: item.isForSale ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç",
                inline: true
            }
        ],
        thumbnail: { url: itemImageUrl },
        image: { url: itemImageUrl },
        timestamp: new Date().toISOString(),
        footer: {
            text: "GitHub Actions ‚Ä¢ 24/7 Pekora Monitor"
        },
        url: itemUrl
    };

    const payload = {
        content: "<@1431351504119271616> üöÄ **–ü–û–Ø–í–ò–õ–°–Ø –ù–û–í–´–ô –¢–û–í–ê–†!**",
        embeds: [embed]
    };

    const options = {
        hostname: 'discord.com',
        path: '/api/webhooks/1431342479222767616/oCWPhuALqVEnH9jCmDVAfCrpgXuY2oXjpInHwiF1vb9HUivbUgMwW8kEAzsTVMXHLrl5'.replace('https://discord.com', ''),
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(JSON.stringify(payload))
        }
    };

    try {
        await makeRequest(options, JSON.stringify(payload));
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.id}`);
        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function getItemDetails(itemIds) {
    const options = {
        hostname: 'www.pekora.zip',
        path: '/apisite/catalog/v1/catalog/items/details',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://www.pekora.zip/'
        }
    };

    try {
        const data = await makeRequest(options, JSON.stringify(itemIds));
        return data.data || [];
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π:', error.message);
        return [];
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function monitor() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());
    console.log('üìù –¢–µ–∫—É—â–∏–π –ø–æ—Å–ª–µ–¥–Ω–∏–π ID:', currentLastId);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        const apiOptions = {
            hostname: 'www.pekora.zip',
            path: '/apisite/catalog/v1/search/items?category=Collectibles&limit=5&sortType=3',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
                'Referer': 'https://www.pekora.zip/'
            }
        };

        const data = await makeRequest(apiOptions);
        
        if (data && data.data && data.data.length > 0) {
            const newestItem = data.data[0];

            if (newestItem && newestItem.id) {
                // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                if (!currentLastId) {
                    console.log(`üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π ID: ${newestItem.id}`);
                    await updateSecret('LAST_ITEM_ID', newestItem.id.toString());
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                if (newestItem.id.toString() !== currentLastId) {
                    console.log(`üéâ –û–ë–ù–ê–†–£–ñ–ï–ù –ù–û–í–´–ô –¢–û–í–ê–†!`);
                    console.log(`üìã –°—Ç–∞—Ä—ã–π ID: ${currentLastId} ‚Üí –ù–æ–≤—ã–π ID: ${newestItem.id}`);

                    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏
                    const detailedItems = await getItemDetails([newestItem.id]);
                    const fullItemData = detailedItems[0] || newestItem;

                    console.log(`üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${fullItemData.name || '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
                    console.log(`üí∞ –¶–µ–Ω–∞: ${fullItemData.price || '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}`);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    const success = await sendDiscordNotification(fullItemData);
                    
                    if (success) {
                        currentLastId = newestItem.id.toString();
                        await updateSecret('LAST_ITEM_ID', currentLastId);
                        console.log(`‚úÖ ID –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentLastId}`);
                    }
                } else {
                    console.log('‚úÖ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç');
                }
            }
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
async function updateSecret(name, value) {
    console.log(`üîê [SIMULATION] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ ${name} = ${value}`);
    // –í GitHub Actions —Å–µ–∫—Ä–µ—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ GitHub API
    // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
}

// –ó–∞–ø—É—Å–∫
monitor().catch(console.error);
